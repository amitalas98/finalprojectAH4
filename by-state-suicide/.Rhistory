{
return(a*b)
}
a = 10
b <- 12
t = a*b
#----------------------------------------------
# Example calls for running lintr and styler from console
#----------------------------------------------
# call: setwd("<absolute_path_to_your_working_directory>")
# call: lint("analysis.R")
# call: style_file("analysis.R")
# filename: analysis.R
#----------------------------------------------
# R Style
# Standards for formating R scripts : https://style.tidyverse.org/news.html
#----------------------------------------------
#----------------------------------------------
# Intall packages into RStudio environment (do only once)
#----------------------------------------------
#install.packages("lintr")
#install.packages("styler")
# NOTE: After you install the packages, see "Addins" pulldown at top
#       of R window
#----------------------------------------------
# To make the functions in the library available in your R script
#----------------------------------------------
library("lintr")
library("styler")
#----------------------------------------------
# Use Lintr and Styler in Addins menu to:
#     (1) Find style voilocations (Lintr)
#     (2) Format the code according to accepted style (Styler)
#----------------------------------------------
# Incorrectly formatted code follows (see example1_analysis_save.R)
# This file is used to demonstrate lint and style - and this is a very long comment, which violates tidyverse style
# this file is used to demonstrate lint and style - and this is a very long comment, which violates tidyverse style
# Silly function
f <- function(a,b)
{
return(a*b)
}
a = 10
b <- 12
t = a*b
#----------------------------------------------
# Example calls for running lintr and styler from console
#----------------------------------------------
# call: setwd("<absolute_path_to_your_working_directory>")
lint("analysis.R")
# call: style_file("analysis.R")
instal.packages("shiny")
install.packages("shiny")
install.packages("miniUI")
lintr:::addin_lint()
# filename: analysis.R
#----------------------------------------------
# R Style
# Standards for formating R scripts : https://style.tidyverse.org/news.html
#----------------------------------------------
#----------------------------------------------
# Intall packages into RStudio environment (do only once)
#----------------------------------------------
#install.packages("lintr")
#install.packages("styler")
# NOTE: After you install the packages, see "Addins" pulldown at top
#       of R window
#----------------------------------------------
# To make the functions in the library available in your R script
#----------------------------------------------
library("lintr")
library("styler")
#----------------------------------------------
# Use Lintr and Styler in Addins menu to:
#     (1) Find style voilocations (Lintr)
#     (2) Format the code according to accepted style (Styler)
#----------------------------------------------
# Incorrectly formatted code follows (see example1_analysis_save.R)
# This file is used to demonstrate lint and style - and this is a very long comment, which violates tidyverse style
# this file is used to demonstrate lint and style - and this is a very long comment, which violates tidyverse style
# Silly function
f <- function(a,b)
{
return(a*b)
}
a = 10
b <- 12
t = a*b
#----------------------------------------------
# Example calls for running lintr and styler from console
#----------------------------------------------
# call: setwd("<absolute_path_to_your_working_directory>")
#lint("analysis.R")
# call: style_file("analysis.R")
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
styler:::style_selection()
styler:::set_style_transformers()
# A single bracket returns a list
t <- temp1["loc"]
print(typeof(t))  # typeof() returns the type of object
# A double brack returns a string
t <- temp1[["loc"]]
print(typeof(t))  # typeof() returns the type of object
#filename: example6.R
#----------------------------------------------
# Creating a list
#----------------------------------------------
temp1 <- list(loc="Seattle", temp=55, validated=TRUE)
temp2 <- list(loc="Toronto", temp=35, validated=FALSE)
#----------------------------------------------
# Adding a list to a vector
#----------------------------------------------
temps <- c(temp1,temp2)
#----------------------------------------------
# Appendng a list to a vector
#----------------------------------------------
append(temps,list(loc="Portland", temp=60, validated=TRUE))
print(temps)
#----------------------------------------------
# Access data in a list
#----------------------------------------------
# By name and $
loc1 <- temp1$loc
print(loc1)
# By name and double brackets
loc2 <- temp2[["loc"]]
print(loc2)
# By index
temp <- temp1[[2]]
print(temp)
# A single bracket returns a list
t <- temp1["loc"]
print(typeof(t))  # typeof() returns the type of object
# A double brack returns a string
t <- temp1[["loc"]]
print(typeof(t))  # typeof() returns the type of object
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(pscl)
install.packages("dplyr")
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
install.packages("dplyr")
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(dplyr)
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
install.packages("pscl")
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
install.packages("tidyr")
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(tidyr)
install.packages("tidyr")
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
install.packages("tidyr")
library(tidyr)
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(stringr)
library(dplyr)
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
View(outcome)
presidentialElections %>%
group_by(year) %>%
print(summarize(value = mean(demVote)))
presidentialElections %>%
group_by(year) %>%
(summarize(value = mean(demVote)))
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
View(outcome)
presidentialElections %>%
group_by(year) %>%
print(summarize(value = mean(demVote)))
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
View(outcome)
presidentialElections %>%
group_by(year) %>%
summarize(value = mean(demVote))
install.packages(nycflights13)
install.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
View(nycflights13)
View("nycflights13")
library(nycflights13)
View(nycflights13)
library(nycflights13)
View(nycflights13::airports)
library(nycflights13)
View(nycflights13::flights)
# library(nycflights13)
# View(nycflights13::flights)
nycflights13::flights %>%
group_by(origin) %>%
summarize(value=mean(arr_delay))
# library(nycflights13)
# View(nycflights13::flights)
nycflights13::flights %>%
group_by(origin) %>%
# summarize(value=mean(arr_delay))
# library(nycflights13)
# View(nycflights13::flights)
nycflights13::flights %>%
group_by(origin) %>%
summarize(mean(arr_delay))
# library(nycflights13)
# View(nycflights13::flights)
nycflights13::flights %>%
group_by(origin) %>%
summarize(mean_delay = mean(arr_delay, na.rm == TRUE))
library(carData)
# library(nycflights13)
# View(nycflights13::flights)
nycflights13::flights %>%
group_by(origin) %>%
summarize(mean_delay = mean(arr_delay, na.rm == TRUE))
# library(nycflights13)
# View(nycflights13::flights)
nycflights13::flights %>%
group_by(origin) %>%
summarize(mean_delay = mean(arr_delay))
# library(nycflights13)
# View(nycflights13::flights)
nycflights13::flights %>%
group_by(origin) %>%
# summarize(mean_delay = mean(arr_delay))
# library(nycflights13)
# View(nycflights13::flights)
nycflights13::flights %>%
group_by(origin) %>%
View(nycflights13::flights)
# summarize(mean_delay = mean(arr_delay))
# library(nycflights13)
# View(nycflights13::flights)
nycflights13::flights %>%
select(origin, arr_delay) %>%
group_by(origin) %>%
# summarize(mean_delay = mean(arr_delay))
# library(nycflights13)
# View(nycflights13::flights)
nycflights13::flights %>%
select(origin, arr_delay) %>%
group_by(origin) %>%
summarize(mean_delay = mean(arr_delay))
View(mean_delay)
# library(nycflights13)
# View(nycflights13::flights)
flights <- nycflights13::flights
flights %>%
select(origin, arr_delay) %>%
group_by(origin) %>%
summarize(mean_delay = mean(arr_delay))
View(mean_delay)
# library(nycflights13)
# View(nycflights13::flights)
flights <- nycflights13::flights
flights %>%
select(origin, arr_delay) %>%
group_by(origin) %>%
summarize(mean_delay = mean(arr_delay)) %>%
View(mean_delay)
# library(nycflights13)
# View(nycflights13::flights)
flights <- nycflights13::flights
flights %>%
select(origin, arr_delay) %>%
group_by(origin) %>%
summarise(mean_size = mean(arr_delay))
# library(nycflights13)
# View(nycflights13::flights)
flights <- nycflights13::flights
flights %>%
select(origin, arr_delay) %>%
View(group_by(origin)) %>%
# summarise(mean_size = mean(arr_delay))
# library(nycflights13)
# View(nycflights13::flights)
flights <- nycflights13::flights
flights %>%
select(origin, arr_delay) %>%
print(group_by(origin))
# summarise(mean_size = mean(arr_delay))
# library(nycflights13)
# View(nycflights13::flights)
flights <- nycflights13::flights
View(flights)
flights %>%
select(origin, arr_delay) %>%
print(group_by(origin))
# summarise(mean_size = mean(arr_delay))
flights %>%
select(origin, arr_delay) %>%
print(group_by(origin))
# library(nycflights13)
# View(nycflights13::flights)
flights <- nycflights13::flights
View(flights)
flights %>%
select(origin, arr_delay) %>%
group_by(origin)
summarize(mean_size = mean(arr_delay))
# library(nycflights13)
# View(nycflights13::flights)
flights <- nycflights13::flights
View(flights)
flights %>%
select(origin, arr_delay) %>%
group_by(origin) %>%
summarize(mean_size = mean(arr_delay))
# library(nycflights13)
# View(nycflights13::flights)
flights <- nycflights13::flights
View(flights)
flights %>%
select(origin, arr_delay) %>%
group_by(origin) %>%
summarize(mean_size = mean(arr_delay, na.rm = TRUE),
min_generation = max(mean_size))
# library(nycflights13)
# View(nycflights13::flights)
flights <- nycflights13::flights
View(flights)
flights %>%
select(origin, arr_delay) %>%
group_by(origin) %>%
summarize(mean_size = mean(arr_delay, na.rm = TRUE))
# library(nycflights13)
# View(nycflights13::flights)
flights <- nycflights13::flights
flights %>%
select(origin, arr_delay) %>%
group_by(origin) %>%
summarize(mean_delay = mean(arr_delay, na.rm = TRUE))
# library(nycflights13)
# View(nycflights13::flights)
flights <- nycflights13::flights
flights %>%
select(origin, arr_delay) %>%
group_by(origin) %>%
summarize(mean_delay = mean(arr_delay, na.rm = TRUE))
View(nycflights13::airports)
# library(nycflights13)
View(nycflights13::flights)
flights <- nycflights13::flights
flights %>%
select(origin, arr_delay) %>%
group_by(origin) %>%
summarize(mean_delay = mean(arr_delay, na.rm = TRUE))
View(nycflights13::airports)
# library(nycflights13)
View(nycflights13::flights)
flights <- nycflights13::flights
flights %>%
select(origin, arr_delay) %>%
group_by(origin) %>%
summarize(mean_delay = mean(arr_delay, na.rm = TRUE))
View(nycflights13::airlines)
library(ggplot2)
head(mpg)
qplot(data=mpg, x=cty, y=hwy)
library(dplyr)
library(ggplot2)
qplot(data=mpg, x=cty, y=hwy)
library(ggplot2)
head(mpg)
library(ggplot2)
head(mpg)
library(ggplot2)
qplot(data=mpg, x=cty, y=hwy)
library(ggplot2)
qplot(data=mpg, x=cty, y=hwy)
library(ggplot2)
qplot(data=mpg, x=cty, y=hwy)
setwd("~/Documents")
datafile <- read.csv("SAGDP2N__ALL_AREAS_1997_2018.csv", stringsAsFactors = FALSE)
View(datafile)
datafile <- read.csv("output.csv", stringsAsFactors = FALSE)
View(datafile)
datafile <- read.csv("output.csv", stringsAsFactors = FALSE)
newdata <- data.frame("_","ST","StateFIPS","Population","Deaths","U_C_Rate","_"
"","","","","","",""
"2008-2014, United States","","","","","",""
"Death Rates per 100,000 Population","","","","","",""
"All Injury, All Intents, All Races, All Ethnicities, Both Sexes, All Ages","","","","","",""
"Annualized Crude Rate for United States: 60.06","","","","","",""
"","","","","","",""
"","","","","","",""
"Reports for All Ages include those of unknown age.","","","","","",""
"* Rates based on 20 or fewer deaths may be unstable.  States with these rates are cross-hatched in the map (see legend above). Such rates have an asterisk.","","","","","",""
"","","","","","",""
"m2370787 created 07DEC16:13:00     downloaded 03NOV19:02:25","","","","","",""
"","","","","","",""
"Types of Rates:    U_C_Rate = Unsmoothed, Crude Rate.","","","","","",""
"","","","","","",""
"","","","","","",""
"Produced by: the Statistics, Programming & Economics Branch, National Center for Injury Prevention & Control, CDC","","","","","",""
"Data Sources: NCHS National Vital Statistics System for numbers of deaths; US Census Bureau for population estimates.","","","","","",""
"","","","","","",""
"","","","","","",""
"","","","","","",""
"","ST","StateFIPS","Population","Deaths","U_C_Rate",""
"","AL","1","33558432","25125","74.86940987",""
"","AK","2","5024225","4079","81.18665068",""
"","AZ","4","45411117","33537","73.85196008",""
"","AR","5","20500179","15760","76.87737751",""
"","CA","6","263818096","121497","46.05332304",""
"","CO","8","35830443","24821","69.27349461",""
"","CT","9","25062400","13467","53.73388023",""
"","DE","10","6359102","3922","61.67537492",""
"","DC","11","4337658","2556","58.92580743",""
"","FL","12","133938024","92039","68.7176033",""
"","GA","13","68637645","39843","58.04832028",""
"","HI","15","9638796","4969","51.55208182",""
"","ID","16","11083018","7454","67.25604885",""
"","IL","17","89878068","45627","50.76544369",""
"","IN","18","45589693","28866","63.31694315",""
"","IA","19","21436265","12944","60.38365359",""
"","KS","20","20049651","13200","65.83655745",""
"","KY","21","30512862","24731","81.05106627",""
"","LA","22","31920282","24171","75.72301523",""
"","ME","23","9303773","6049","65.01663357",""
"","MD","24","40839701","22499","55.09100079",""
"","MA","25","46256590","21418","46.3025917",""
"","MI","26","69300707","42832","61.80600726",""
"","MN","27","37440030","21358","57.04589446",""
"","MS","28","20824763","17032","81.78724531",""
"","MO","29","42018262","31227","74.31768596",""
"","MT","30","6991079","6204","88.74166634",""
"","NE","31","12883593","7092","55.04675598",""
"","NV","32","19143270","13009","67.95599707",""
"","NH","33","9237313","5589","60.50460778",""
"","NJ","34","61826877","26448","42.77751244",""
"","NM","35","14442111","13682","94.73684283",""
"","NY","36","136468396","56776","41.60377176",""
"","NC","37","67487062","43251","64.08783953",""
"","ND","38","4845414","3139","64.78290606",""
"","OH","39","80842617","51792","64.06521946",""
"","OK","40","26472654","23136","87.39584629",""
"","OR","41","27073057","17981","66.41658532",""
"","PA","42","89064065","60143","67.52779586",""
"","RI","44","7374400","4667","63.28650466",""
"","SC","45","32744318","23515","71.81398617",""
"","SD","46","5777731","4059","70.25249185",""
"","TN","47","44799722","35127","78.4089687",""
"","TX","48","179470855","97582","54.37205946",""
"","UT","49","19666542","12327","62.68005834",""
"","VT","50","4380714","3117","71.15278468",""
"","VA","51","56660701","29956","52.86909528",""
"","WA","53","47707906","28551","59.84542688",""
"","WV","54","12956295","12193","94.10869388",""
"","WI","55","39931436","25979","65.05901766",""
"","WY","56","3981420","3403","85.47201752","")
View(newdata)
datafile <- read.csv("tabulate.csv", stringsAsFactors = FALSE)
View(datafile)
datafile <- read.csv("Educational_status_of_suicide_victimes_state.csv", stringsAsFactors = FALSE)
View(datafile)
setwd("~/Documents/final-project/finalprojectAH4/by-state-suicide")
datafile <- read.csv("death-rates-08-10.csv", stringsAsFactors = FALSE)
View(datafile)
datafile <- read.csv("death-rates-08-10.csv", stringsAsFactors = FALSE)
View(datafile)
datafile <- read.csv("death-rates-08-10.csv", stringsAsFactors = FALSE)
View(datafile)
hi <- read.csv("death-rates-08-10.csv", stringsAsFactors = FALSE)
View(hi)
hi <- read.csv("death-rates08-10.csv", stringsAsFactors = FALSE)
View(hi)
