<<<<<<< HEAD
filter(city %in% "Thousand Oaks") %>%
pull(num_killed)
# Number of people that are injured in November 7, 2018,
# California, Thousand Oaks city
injured_in_thousand_oaks <- shootings_2018_data %>%
filter(city %in% "Thousand Oaks") %>%
pull(num_injured)
# Thousand Oaks city
thousand_oaks_city <- shootings_2018_data %>%
filter(city %in% "Thousand Oaks") %>%
pull(city)
# The state of Thousand Oaks city
california <- shootings_2018_data %>%
filter(city %in% "Thousand Oaks") %>%
pull(state)
# The date of Thousand Oaks city mass shooting event
date <- shootings_2018_data %>%
filter(city %in% "Thousand Oaks") %>%
pull(date)
# An interactive map
# Interactive map that shows a marker at the location of each shooting
impacted <- shootings_2018_data$num_killed + shootings_2018_data$num_injured
interactive_map <- leaflet(data = shootings_2018_data) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = paste("Date: ", shootings_2018_data$date, "<br>",
"Address: ", shootings_2018_data$address, "<br>",
"State: ", shootings_2018_data$state, "<br>",
"Killed num: ", shootings_2018_data$num_killed, "<br>",
"Injured num: ", shootings_2018_data$num_injured, "<br>"),
radius = impacted * 10000,
stroke = FALSE
)
# A plot of your choice
# A plot of Total number of killed and injured in each month
data_plot <- shootings_2018_data %>%
mutate(month = format(as.Date(date, format = "%B %d, %Y"), "%B")) %>%
mutate(total_num_of_killed_and_injured = num_killed + num_injured) %>%
group_by(month) %>%
summarize(month_total_killed_and_injured =
sum(total_num_of_killed_and_injured)) %>%
mutate(month = factor(month, levels = month.name))
plot_total_imapcted_by_month <- ggplot(data = data_plot) +
geom_bar(stat = "identity", mapping =
aes(x = month, y = month_total_killed_and_injured,
fill = month)) +
labs(
title = "Total number of killed and injured each month",
x = "Month",
y = "Total number of killed and injured"
) + theme(axis.text.x  = element_text(angle = 45, hjust = 1))
impacted <- shootings_2018_data$num_killed + shootings_2018_data$num_injured
interactive_map <- leaflet(data = shootings_2018_data) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = paste("Date: ", shootings_2018_data$date, "<br>",
"Address: ", shootings_2018_data$address, "<br>",
"State: ", shootings_2018_data$state, "<br>",
"Killed num: ", shootings_2018_data$num_killed, "<br>",
"Injured num: ", shootings_2018_data$num_injured, "<br>"),
radius = impacted * 10000,
stroke = FALSE
)
# A5 Data Report
# Load the `dplyr` package
library("dplyr");
# Load your data, making sure to not interpret strings as factors
shootings_2018_data <-
read.csv("./data/shootings-2018.csv", stringsAsFactors = FALSE)
# Summary information
# - How many shooting events occurred?
total_shooting_events <- nrow(shootings_2018_data)
# - How many lives were lost?
total_num_killed <- shootings_2018_data %>%
select(num_killed) %>%
sum
# - Which city was most impacted by shootings
# (make sure to clarify  how you are measuring "impact")?
# I feel like the most shooting impacted city would be the
# city that has the largest total number of killed and injured
most_shooting_impacted_city <- shootings_2018_data %>%
mutate(total_num_of_killed_and_injured = num_killed + num_injured) %>%
arrange(desc(total_num_of_killed_and_injured)) %>%
filter(row_number() == 1) %>%
pull(city)
# - Two other insights of your choice
# Question 1 - Which state(s) has the most shooting events?
state_most_shooting_event <- shootings_2018_data %>%
group_by(state) %>%
summarize(freq = n()) %>%
arrange(desc(freq)) %>%
filter(row_number() == 1 | row_number() == 2) %>%
pull(state)
# Question 2 - How many people were injured in 2018?
total_num_injured <- shootings_2018_data %>%
select(num_injured) %>%
sum
# Summary Table
# - Which state was impacted by shootings the most
# (the highest total number of killed and injured by shooting)
state_was_impacted_the_most <- shootings_2018_data %>%
mutate(total_num_of_killed_and_injured = num_killed + num_injured) %>%
group_by(state) %>%
summarize(Total_number_of_killed_and_injured =
sum(total_num_of_killed_and_injured)) %>%
arrange(desc(Total_number_of_killed_and_injured))
# Description of a particular incident
# Data of shooting events in Thousand Oaks City
# Number of people that are killed in
# November 7, 2018, California, Thousand Oaks city
killed_in_thousand_oaks <- shootings_2018_data %>%
filter(city %in% "Thousand Oaks") %>%
pull(num_killed)
# Number of people that are injured in November 7, 2018,
# California, Thousand Oaks city
injured_in_thousand_oaks <- shootings_2018_data %>%
filter(city %in% "Thousand Oaks") %>%
pull(num_injured)
# Thousand Oaks city
thousand_oaks_city <- shootings_2018_data %>%
filter(city %in% "Thousand Oaks") %>%
pull(city)
# The state of Thousand Oaks city
california <- shootings_2018_data %>%
filter(city %in% "Thousand Oaks") %>%
pull(state)
# The date of Thousand Oaks city mass shooting event
date <- shootings_2018_data %>%
filter(city %in% "Thousand Oaks") %>%
pull(date)
# An interactive map
# Interactive map that shows a marker at the location of each shooting
impacted <- shootings_2018_data$num_killed + shootings_2018_data$num_injured
interactive_map <- leaflet(data = shootings_2018_data) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = paste("Date: ", shootings_2018_data$date, "<br>",
"Address: ", shootings_2018_data$address, "<br>",
"State: ", shootings_2018_data$state, "<br>",
"Killed num: ", shootings_2018_data$num_killed, "<br>",
"Injured num: ", shootings_2018_data$num_injured, "<br>"),
radius = impacted * 10000,
stroke = FALSE
)
impacted <- shootings_2018_data$num_killed + shootings_2018_data$num_injured
interactive_map <- leaflet(data = shootings_2018_data) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = paste("Date: ", shootings_2018_data$date, "<br>",
"Address: ", shootings_2018_data$address, "<br>",
"State: ", shootings_2018_data$state, "<br>",
"Killed num: ", shootings_2018_data$num_killed, "<br>",
"Injured num: ", shootings_2018_data$num_injured, "<br>"),
radius = impacted * 10000,
stroke = FALSE
)
interactive_map <- leaflet(data = shootings_2018_data) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = paste("Date: ", shootings_2018_data$date, "<br>",
"Address: ", shootings_2018_data$address, "<br>",
"State: ", shootings_2018_data$state, "<br>",
"Killed num: ", shootings_2018_data$num_killed, "<br>",
"Injured num: ", shootings_2018_data$num_injured, "<br>"),
radius = impacted * 10000,
stroke = FALSE
)
print(interactive_map)
print(interactive_map)
print(interactive_map)
setwd("~/Desktop/UW/Autumn 19/INFO 201/finalprojectAH4/Betty's work LOL")
print(interactive_map)
library(leaflet)
suicide_num <- suic_state$X2015
interactive_map <- leaflet(data = suic_state) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = paste("Year: 2015", "<br>",
"Suicide Number: ", suic_state$X2015, "<br>",
"State: ", shootings_2018_data$state, "<br>"),
radius = suicide_num * 10000,
stroke = FALSE
)
print(interactive_map)
library(leaflet)
suicide_num <- suic_state$X2015
interactive_map <- leaflet(data = suic_state) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = paste("Year: 2015", "<br>",
"Suicide Number: ", suic_state$X2015, "<br>",
"State: ", shootings_2018_data$state, "<br>"),
radius = suicide_num,
stroke = FALSE
)
print(interactive_map)
library(leaflet)
suicide_num <- suic_state$X2015
interactive_map <- leaflet(data = suic_state) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = paste("Year: 2015", "<br>",
"Suicide Number: ", suic_state$X2015, "<br>",
"State: ", shootings_2018_data$state, "<br>"),
radius = suicide_num * 100,
stroke = FALSE
)
print(interactive_map)
suicide_num <- suic_state$X2015
interactive_map <- leaflet(data = suic_state) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = paste("Year: 2015", "<br>",
"Suicide Number: ", suic_state$X2015, "<br>",
"State: ", shootings_2018_data$state, "<br>"),
radius = suicide_num * 50,
stroke = FALSE
)
print(interactive_map)
suicide_num <- suic_state$X2015
interactive_map <- leaflet(data = suic_state) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = ~paste("Year: 2015", "<br>",
"Suicide Number: ", suic_state$X2015, "<br>",
"State: ", shootings_2018_data$state, "<br>"),
radius = ~suicide_num * 50,
stroke = FALSE
)
print(interactive_map)
suicide_num <- suic_state$X2015
interactive_map <- leaflet(data = suic_state) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = ~paste("Year: 2015", "<br>",
"Suicide Number: ", suic_state$X2015, "<br>",
"State: ", shootings_2018_data$state, "<br>"),
radius = ~suicide_num * 50,
weight = 1
)
print(interactive_map)
library(leaflet)
suicide_num <- suic_state$X2015
interactive_map <- leaflet(data = suic_state) %>%
addTiles() %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = ~paste("Year: 2015", "<br>",
"Suicide Number: ", suic_state$X2015, "<br>",
"State: ", shootings_2018_data$state, "<br>"),
radius = ~suicide_num * 50,
stroke = FALSE
)
print(interactive_map)
library(leaflet)
suicide_num <- suic_state$X2015
interactive_map <- leaflet(data = suic_state) %>%
addTiles() %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = ~paste("Year: 2015", "<br>",
"Suicide Number: ", suic_state$X2015, "<br>",
"State: ", shootings_2018_data$State, "<br>"),
radius = ~suicide_num * 50,
stroke = FALSE
)
print(interactive_map)
library(leaflet)
suicide_num <- suic_state$X2015
interactive_map <- leaflet(data = suic_state) %>%
addTiles() %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = ~paste("Year: 2015", "<br>",
"Suicide Number: ", suic_state$X2015, "<br>",
"State: ", shootings_2018_data$State, "<br>"),
radius = ~suicide_num * 50,
stroke = FALSE
)
print(interactive_map)
library(leaflet)
suicide_num <- suic_state$X2015
interactive_map <- leaflet(data = suic_state) %>%
addTiles() %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = ~paste("Year: 2015", "<br>",
"Suicide Number: ", suic_state$X2015, "<br>",
"State: ", suic_state$State, "<br>"),
radius = ~suicide_num * 50,
stroke = FALSE
)
print(interactive_map)
library(leaflet)
suicide_num <- suic_state$X2015
interactive_map <- leaflet(data = suic_state) %>%
addTiles() %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = ~paste("Year: 2015", "<br>",
"Suicide Number: ", suic_state$X2015, "<br>",
"State: ", suic_state$State, "<br>"),
radius = ~suicide_num * 50,
stroke = FALSE
)
print(interactive_map)
population <- read.csv("./populations.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/UW/Autumn 19/INFO 201/finalprojectAH4/Betty's work LOL")
population <- read.csv("./populations.csv", stringsAsFactors = FALSE)
population <- read.csv("./populations.csv", stringsAsFactors = FALSE)
population <- read.csv("./populations.csv", stringsAsFactors = FALSE)
population <- read.csv("populations.csv", stringsAsFactors = FALSE)
source('~/Desktop/UW/Autumn 19/INFO 201/finalprojectAH4/Betty\'s work LOL/map.R')
source('~/Desktop/UW/Autumn 19/INFO 201/finalprojectAH4/Betty\'s work LOL/map.R')
population <- read.csv("populations.csv", stringsAsFactors = FALSE)
source('~/Desktop/UW/Autumn 19/INFO 201/finalprojectAH4/Betty\'s work LOL/map.R')
source('~/Desktop/UW/Autumn 19/INFO 201/finalprojectAH4/Betty\'s work LOL/map.R')
suic_state <-
read.csv("./four_years_state_suicide.csv", stringsAsFactors = FALSE)
suic_state <-
read.csv("by-state-suicide/four_years_state_suicide.csv", stringsAsFactors = FALSE)
source('~/Desktop/UW/Autumn 19/INFO 201/finalprojectAH4/Betty\'s work LOL/map.R')
source('~/Desktop/UW/Autumn 19/INFO 201/finalprojectAH4/Betty\'s work LOL/map.R')
setwd("~/Desktop/UW/Autumn 19/INFO 201/finalprojectAH4/Betty's work LOL")
suic_state <-
read.csv("by-state-suicide/four_years_state_suicide.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/UW/Autumn 19/INFO 201/finalprojectAH4")
suic_state <-
read.csv("by-state-suicide/four_years_state_suicide.csv", stringsAsFactors = FALSE)
population <- read.csv("populations.csv", stringsAsFactors = FALSE)
View(population)
suicide_num <- suic_state$X2015 / population$X2015
new_suic_state <- suic_state %>%
select(!State, "District of Columbia")
new_suic_state <- suic_state %>%
select(State != "District of Columbia")
suic_state <-
read.csv("by-state-suicide/four_years_state_suicide.csv", stringsAsFactors = FALSE)
new_suic_state <- suic_state %>%
select(State != "District of Columbia")
suic_state <-
read.csv("by-state-suicide/four_years_state_suicide.csv", stringsAsFactors = FALSE)
new_suic_state <- suic_state %>%
filter(State != "District of Columbia")
View(new_suic_state)
suic_state <-
read.csv("by-state-suicide/four_years_state_suicide.csv", stringsAsFactors = FALSE)
new_suic_state <- suic_state %>%
filter(State != "District of Columbia")
library(ggplot2)
=======
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram()
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram(bins = 30)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram(bins = 30)
mean(phats_20)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(oilabs)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(oilabs)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
proportions <- ames %>% select(Central.Air) %>% table() %>% prop.table()
p <- as.numeric(proportions[2])
ames <- ames %>% mutate(air = 1*(Central.Air == 'Y'))
air <- ames$air
pop_p <- sum(air)/as.numeric(count(ames))
pop_sd <- sd(air)
pop_sd_test <- sqrt(pop_p*(1-pop_p))
samp <- sample(air, size = 50)
p_hat <- sum(samp)/length(samp)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram(bins = 30)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram(bins = 30)
median(phats_20)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram(bins = 30)
median(phats_20)
min(phats_20)
max(phats_20)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram(bins = 30)
median(phats_20)
min(phats_20)
max(phats_20)
summarize(phats_20)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram(bins = 30)
median(phats_20)
min(phats_20)
max(phats_20)
summary(phats_20)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram(bins = 30)
summary(phats_20)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(oilabs)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(oilabs)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(oilabs)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
proportions <- ames %>% select(Central.Air) %>% table() %>% prop.table()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(oilabs)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(oilabs)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
proportions <- ames %>% select(Central.Air) %>% table() %>% prop.table()
p <- as.numeric(proportions[2])
proportions <- ames %>% select(Central.Air) %>% table() %>% prop.table()
p <- as.numeric(proportions[2])
ames <- ames %>% mutate(air = 1*(Central.Air == 'Y'))
air <- ames$air
pop_p <- sum(air)/as.numeric(count(ames))
pop_sd <- sd(air)
pop_sd_test <- sqrt(pop_p*(1-pop_p))
samp <- sample(air, size = 50)
p_hat <- sum(samp)/length(samp)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram(bins = 30)
summary(phats_20)
mean_phats_20 <- mean(phats_20)
mean_phats_20 <- mean(phats_20)
diff <- mean_phats_20 - p
sd_phats_20 <- sd(phats_20)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
phats_50 <- replicate(100000, mean(sample(air, size=50)))
phats_200 <- replicate(100000, mean(sample(air, size=200)))
ggplot(data = NULL, aes(x = phats_50)) + geom_histogram(bins = 30)
ggplot(data = NULL, aes(x = phats_50)) + geom_histogram(bins = 30)
ggplot(data = NULL, aes(x = phats_200)) + geom_histogram(bins = 30)
ggplot(data = NULL, aes(x = phats_50)) + geom_histogram(bins = 40)
ggplot(data = NULL, aes(x = phats_200)) + geom_histogram(bins = 40)
ggplot(data = NULL, aes(x = phats_50)) + geom_histogram(bins =50)
ggplot(data = NULL, aes(x = phats_200)) + geom_histogram(bins = 50)
ggplot(data = NULL, aes(x = phats_50)) + geom_histogram()
ggplot(data = NULL, aes(x = phats_200)) + geom_histogram()
ggplot(data = NULL, aes(x = phats_50)) + geom_histogram(bins = 30)
ggplot(data = NULL, aes(x = phats_200)) + geom_histogram(bins = 30)
ggplot(data = NULL, aes(x = phats_200)) +
geom_blank() +
geom_histogram(bins=30,aes(y = ..density..)) +
stat_function(fun = dnorm, args = c(mean = pop_p, sd = sqrt((pop_p)*(1-pop_p)/200)), col = "tomato")
lower <- pop_p - 1.96*pop_sd/sqrt(200)
upper <- pop_p + 1.96*pop_sd/sqrt(200)
sum(phats_200 > lower & phats_200 < upper)
## And calculations
lower <- pop_p - 1.96*pop_sd/sqrt(200)
upper <- pop_p + 1.96*pop_sd/sqrt(200)
round(sum(phats_200 > lower & phats_200 < upper),2)
lower <- pop_p - 1.96*pop_sd/sqrt(200)
upper <- pop_p + 1.96*pop_sd/sqrt(200)
sum(phats_200 > lower & phats_200 < upper)
lower <- pop_p - 1.96*pop_sd/sqrt(200)
upper <- pop_p + 1.96*pop_sd/sqrt(200)
proportion <- sum(phats_200 > lower & phats_200 < upper)/length(phats_200)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
library(tidyverse)
choose(100,97)
# Choose function to calculate the number of ways to choose 97successes in 100 trails
value <- choose(100,97)
#Success = 0.90 & Fail = 1 - 0.90 = 0.10
success <- 0.90
fail <- 0.10
#Calculating the probability that exactly 97 out of 100 randomly sampled American adults had chickenpox during childhood.
probability1 <- value * success^97 * fail^3
#Choose function to calculate the number of ways to choose 3 failures in 100 trails
value2 <- choose(100,3)
#Calculating the probability that exactly 3 out of a new sample of 100 American adults have not had chickenpox in their childhood.
probability2 <- value2 * fail^3 * success^97
#Choose function to calculate the number of ways to choose 0 success in 10 trails
value3 <- choose(10,0)
#Calculating the probability that exactly none of a sample of 10 have had chickenpox
probability3 <- value3 * success^0 * fail^10
#The probability that at least 1 out of 10 have had chickenpox is the same as 1 - probability of none having chickenpox
answer <- 1 - probability3
#Choose function to calculate the number of ways to choose 0, 1, 2 and 3 failures in 10 trails
f0 <- choose(10,0)
f1 <- choose(10,1)
f2 <- choose(10,2)
f3 <- choose(10,3)
#Calculating the probability that exactly all of the sample of 10 have had chickenpox
p0 <- f0 * fail^0 * success^10
#Calculating the probability that exactly 9 of the sample of 10 have had chickenpox
p1 <- f1 * fail^1 * success^9
#Calculating the probability that exactly 8 of the sample of 10 have had chickenpox
p2 <- f2 * fail^2 * success^8
#Calculating the probability that exactly 7 of the sample of 10 have had chickenpox
p3 <- f3 * fail^3 * success^7
#The probability that at least 1 out of 10 have had chickenpox is the same as 1 - probability of none having chickenpox
answer2 <- p0 + p1 + p2 + p3
#Choose function to calculate the number of ways to choose 0 success in 10 trails
value3 <- choose(10,0)
#Calculating the probability that exactly none of a sample of 10 have had chickenpox
probability3 <- value3 * success^0 * fail^10
#The probability that at least 1 out of 10 have had chickenpox is the same as 1 - probability of none having chickenpox
answer <- 1 - probability3
#Choose function to calculate the number of ways to choose 0, 1, 2 and 3 failures in 10 trails
f0 <- choose(10,0)
f1 <- choose(10,1)
f2 <- choose(10,2)
f3 <- choose(10,3)
#Calculating the probability that exactly all of the sample of 10 have had chickenpox
p0 <- f0 * fail^0 * success^10
#Calculating the probability that exactly 9 of the sample of 10 have had chickenpox
p1 <- f1 * fail^1 * success^9
#Calculating the probability that exactly 8 of the sample of 10 have had chickenpox
p2 <- f2 * fail^2 * success^8
#Calculating the probability that exactly 7 of the sample of 10 have had chickenpox
p3 <- f3 * fail^3 * success^7
#The probability that at least 1 out of 10 have had chickenpox is the same as 1 - probability of none having chickenpox
answer2 <- p0 + p1 + p2 + p3
# Standard Devation
p = 0.9
SD = sqrt(0.9*0.1*120)
# Mean
mean = 0.09 * 15000
sd = sqrt(0.09*15000*(1-0.09))
# Mean
mean <- 0.09 * 15000
sd <- sqrt(0.09*15000*(1-0.09))
probability <- binomial(15000,0.09)
N(mean,sd)
x <- N(mean,sd)
# Z-score
Z <- (1500 - mean)/sd
probability4 <- 1 - dnorm(Z)
# Z-score
Z <- (1500 - mean)/sd
probability4 <- 1 - pnorm(Z)
# Z-score
Z <- (1500 - mean)/sd
probability4 <- 1 - pnorm(Z)
# Mean
mean <- 0.09 * 15000
sd <- sqrt(0.09*15000*(1-0.09))
# Z-score
Z <- (1500 - mean)/sd
probability4 <- 1 - pnorm(Z)
pnorm
# Z-score
Z <- (1500 - mean)/sd
pnorm(Z)
probability4 <- 1 - pnorm(Z)
pnorm
# Z-score
Z <- (1500 - mean)/sd
pnorm(Z)
probability4 <- 1 - pnorm(Z)
pnorm
# Z-score
Z <- (1500 - mean)/sd
round(1-pnorm(Z),6)
probability4 <- 1 - pnorm(Z)
pnorm
# Z-score
Z <- (1500 - mean)/sd
round(1-pnorm(Z),7)
probability4 <- 1 - pnorm(Z)
pnorm
# Z-score
Z <- (1500 - mean)/sd
round(1-pnorm(Z),7)
probability4 <- 1 - pnorm(Z)
9.4*10^-6
pnorm
# Z-score
Z <- (1500 - mean)/sd
#Calculating probability that a survey with 15000 households has 1500 or more responses is
probability4 <- 1 - pnorm(Z)
pnorm
# Z-score
Z <- (1500 - mean)/sd
#Calculating probability that a survey with 15000 households has 1500 or more responses is
probability4 <- 1 - pnorm(Z, lower.tail = FALSE)
pnorm
# Z-score
Z <- (1500 - mean)/sd
#Calculating probability that a survey with 15000 households has 1500 or more responses is
probability4 <- 1 - pnorm(Z)
library(tidyverse)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
area <- ames$Gr.Liv.Area
area <- ames$Gr.Liv.Area
pop_mean <- mean(area)
pop_sd <- sd(area)
SE <- pop_sd/sqrt(30)
xbar_30 <- replicate(100000, mean(sample(area, size=30)))
mean_xbar <- mean(xbar_30)
sd_xbar <- sd(xbar_30)
ggplot(data = NULL, aes(x = phats_200)) +
geom_blank() +
geom_histogram(bins=30,aes(y = ..density..)) +
stat_function(fun = dnorm, args = c(mean = pop_p, sd = pop_sd/sqrt(200)), col = "tomato")
ggplot(data = NULL, aes(x = xbar_30)) +
geom_blank() +
geom_histogram(bins=30,aes(y = ..density..)) +
stat_function(fun = dnorm, args = c(mean = pop_mean, sd = pop_sd/sqrt(30)), col = "tomato")
lower <- pop_mean - 1.96*pop_sd/sqrt(30)
upper <- pop_mean + 1.96*pop_sd/sqrt(30)
proportion <- sum(xbar_30 > lower & xbar_30 < upper)/length(xbar_30)
income_data <- read.csv("./incomeforfinalproject.csv", stringsAsFactors = FALSE)
setwd("~/Github/finalprojectAH4/by-state-suicide")
>>>>>>> 9f71675dff13297b79ec2d715ea14828f0aa6914
library(dplyr)
population <- read.csv("populations.csv", stringsAsFactors = FALSE)
library(leaflet)
interactive_map <- leaflet(data = new_suic_state) %>%
addTiles() %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = ~paste("Year: 2015", "<br>",
"Suicide Number: ", new_suic_state$X2015, "<br>",
"State: ", new_suic_state$State, "<br>"),
radius = ~suicide_num * 50,
stroke = FALSE
)
print(interactive_map)
interactive_map <- leaflet(data = new_suic_state) %>%
addTiles() %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = ~paste("Year: 2015", "<br>",
"Suicide Number: ", new_suic_state$X2015, "<br>",
"State: ", new_suic_state$State, "<br>"),
radius = ~new_suic_state$X2015 * 50,
stroke = FALSE
)
print(interactive_map)
suic_state <-
read.csv("by-state-suicide/four_years_state_suicide.csv", stringsAsFactors = FALSE)
new_suic_state <- suic_state %>%
filter(State != "District of Columbia")
suic_state <-
read.csv("by-state-suicide/four_years_state_suicide.csv", stringsAsFactors = FALSE)
suic_state <-
read.csv("by-state-suicide/four_years_state_suicide.csv", stringsAsFactors = FALSE)
new_suic_state <- suic_state %>%
filter(State != "District of Columbia")
interactive_map <- leaflet(data = new_suic_state) %>%
addTiles() %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = ~paste("Year: 2015", "<br>",
"Suicide Number: ", new_suic_state$X2015, "<br>",
"State: ", new_suic_state$State, "<br>"),
radius = ~new_suic_state$X2015 * 50,
stroke = FALSE
)
print(interactive_map)
suic_state <-
read.csv("by-state-suicide/four_years_state_suicide.csv", stringsAsFactors = FALSE)
new_suic_state <- suic_state %>%
filter(State != "District of Columbia")
View(new_suic_state)
interactive_map <- leaflet(data = new_suic_state) %>%
addTiles() %>%
addCircles(
lat = ~lat,
lng = ~long,
popup = ~paste("Year: 2015", "<br>",
"Suicide Number: ", new_suic_state$X2015, "<br>",
"State: ", new_suic_state$State, "<br>"),
radius = ~new_suic_state$X2015 * 50,
stroke = FALSE
)
print(interactive_map)
shiny::runApp()
write.csv(new_suic_state)
write.csv(new_suic_state, file = "new_suic_state.csv")
suic_state <-
read.csv("by-state-suicide/four_years_state_suicide.csv", stringsAsFactors = FALSE)
new_suic_state <- suic_state %>%
filter(State != "District of Columbia")
write.csv(new_suic_state, file = "new_suic_state.csv")
suic_state <-
read.csv("by-state-suicide/four_years_state_suicide.csv", stringsAsFactors = FALSE)
new_suic_state <- suic_state %>%
filter(State != "District of Columbia")
write.csv(new_suic_state, file = "new_suic_state.csv")
suic_state <-
read.csv("by-state-suicide/four_years_state_suicide.csv", stringsAsFactors = FALSE)
suic_state <-
read.csv("by-state-suicide/four_years_state_suicide.csv", stringsAsFactors = FALSE)
new_suic_state <- suic_state %>%
filter(State != "District of Columbia")
write.csv(new_suic_state, file = "new_suic_state.csv")
write.csv(new_suic_state, "new_suic_state.csv")
View(new_suic_state)
library(shiny)
library(leaflet)
library(dplyr)
library(leaflet.extras)
#import data
data <- read.csv("new_suic_state.csv")
#load libraries
library(shiny)
library(leaflet)
library(dplyr)
library(leaflet.extras)
#import data
data <- read.csv("new_suic_state.csv")
setwd("~/Desktop/UW/Autumn 19/INFO 201/finalprojectAH4/Betty's work LOL")
setwd("~/Desktop/UW/Autumn 19/INFO 201/finalprojectAH4")
#load libraries
library(shiny)
library(leaflet)
library(dplyr)
library(leaflet.extras)
#import data
data <- read.csv("new_suic_state.csv")
#load libraries
library(shiny)
library(leaflet)
library(dplyr)
library(leaflet.extras)
#import data
data <- read.csv("by-state-suicide/new_suic_state.csv")
server <- function(input, output, session) {
#define the color pallate for the magnitidue of the earthquake
pal <- colorNumeric(
palette = c('gold', 'orange', 'dark orange', 'orange red', 'red', 'dark red'),
domain = data$X2000)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/UW/Autumn 19/INFO 201/finalprojectAH4")
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
