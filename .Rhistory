<<<<<<< HEAD
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
lintr:::addin_lint()
lintr:::addin_lint()
install.packages("carData")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library("carData")
print(sum(Florida[Florida["GORE"] > Florida["BUSH]","NADER"]))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(Flights)
source('~/.active-rstudio-document')
view(flights)
View(flights)
View("flights")
source('~/.active-rstudio-document')
View(flights)
View(Flights)
View(Flight)
View(flight)
View(flights)
source('~/.active-rstudio-document')
library(nycflights13)
source('~/.active-rstudio-document')
install.packages("nycflights13")
source('~/.active-rstudio-document')
library("nycflights13")
View(flights)
library("dplyr")
install.packages("dplyr")
library("dplyr")
airport <- flights %>%
group_by(dest) %>%
summarise(mean_arrv <- mean(arr_time)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
airport <- flights %>%
group_by(dest) %>%
summarise(mean_arrv = mean(arr_time)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
airport <- flights %>%
group_by(dest) %>%
summarise(mean_arrv = mean(arr_time)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
View(airport)
library(pscl)
install.packages("pscl")
library(pscl)
View(presidentialElections)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(nycflights13)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("nycflights13")
View(flights)
install.packages("dplyr")
library("dplyr")
airport <- flights %>%
group_by(dest) %>%
summarise(mean_arrv = mean(arr_time)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
View(flights)
library(flights)
View(flights)
install.packages("dplyr")
library("dplyr")
airport <- flights %>%
group_by(dest) %>%
summarise(mean_arrv = mean(arr_time)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
install.packages("dplyr")
source('~/.active-rstudio-document')
library("flights")
library("flights")
View(flights)
library(nycflights13)
library("flights13")
View(flights)
install.packages("dplyr")
library("dplyr")
airport <- flights %>%
group_by(dest) %>%
summarise(mean_arrv = mean(arr_time)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
airport <- flights %>%
group_by(dest) %>%
summarize(mean_arrv = mean(arr_time)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
source('~/.active-rstudio-document')
airport <- flights %>%
group_by(dest) %>%
summarize(mean_arrv = mean(arr_time, na.rm = TRUE)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
airport <- flights %>%
group_by(dest) %>%
summarize(grouped, mean_arrv = mean(arr_time, na.rm = TRUE)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
source('~/.active-rstudio-document')
airport <- flights %>%
group_by(dest) %>%
summarize(grouped, mean_arrv = mean(arr_time)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
airport <- flights %>%
group_by(dest) %>%
summarize( mean_arrv = mean(arr_time)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
library("dplyr")
airport <- flights %>%
group_by(dest)
#summarize( mean_arrv = mean(arr_time)) %>%
#filter(mean_arrv == max(mean_arrv)) %>%
#select(dest)
#print(airport)
View(airport)
airport <- group_by(flights, dest)
#summarize( mean_arrv = mean(arr_time)) %>%
#filter(mean_arrv == max(mean_arrv)) %>%
#select(dest)
#print(airport)
View(airport)
airport <- group_by(flights, dest)
sum <- summarise(airport, mean_arrv = mean(arr_time))
#summarize( mean_arrv = mean(arr_time)) %>%
#filter(mean_arrv == max(mean_arrv)) %>%
#select(dest)
#print(airport)
View(sum)
airport <- group_by(flights, dest)
sum <- summarise(airport, mean_arrv = mean(arr_time, na.rm = TRUE))
#summarize( mean_arrv = mean(arr_time)) %>%
#filter(mean_arrv == max(mean_arrv)) %>%
#select(dest)
#print(airport)
View(sum)
answer <- filter(sum, mean_arrv == max(mean_arrv)) %>%
select(dest)
#print(airport)
print(answer)
answer <- filter(sum, mean_arrv == max(mean_arrv)) %>%
select(dest)
#print(airport)
View(answer)
answer <- filter(sum, mean_arrv == max(mean_arrv))
#print(airport)
print(answer)
answer <- filter(sum, mean_arrv == max(mean_arrv))
a <- select(answer, dest)
#print(airport)
print(a)
#print(airport)
View(filter(sum, mean_arrv == max(mean_arrv)))
View(filter(sum, mean_arrv == max(mean_arrv)))
#print(airport)
View(select(filter(sum, mean_arrv == max(mean_arrv)), dest))
source('~/.active-rstudio-document')
library("nycflights13")
View(flights)
install.packages("dplyr")
library("dplyr")
airport <- group_by(flights, dest)
lastest_arrv <- flights %>%
group_by(dest) %>%
summarize(average_arrv = mean(arr_time)) %>%
filter(average_arrv == max(average_arrv)) %>%
select(dest)
print(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
filter(arr_time == NA)
summarize(average_arrv = mean(arr_time)) %>%
filter(average_arrv == max(average_arrv)) %>%
select(dest)
print(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
filter(arr_time == NA)
summarize(average_arrv = mean(arr_time)) %>%
filter(average_arrv == max(average_arrv)) %>%
select(dest)
print(lastest_arrv)
library("dplyr")
lastest_arrv <- flights %>%
group_by(dest) %>%
filter(arr_time != NA)
summarize(average_arrv = mean(arr_time)) %>%
filter(average_arrv == max(average_arrv)) %>%
select(dest)
print(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
filter(arr_time != NA) %>%
summarize(average_arrv = mean(arr_time)) %>%
filter(average_arrv == max(average_arrv)) %>%
select(dest)
print(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
filter(arr_time != NA) %>%
summarize(average_arrv = mean(arr_time)) %>%
#filter(average_arrv == max(average_arrv)) %>%
#select(dest)
print(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
filter(arr_time != NA) %>%
summarize(average_arrv = mean(arr_time))
#filter(average_arrv == max(average_arrv)) %>%
#select(dest)
print(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
filter(arr_time != NA) %>%
summarize(average_arrv = mean(arr_time))
filter(average_arrv == max(average_arrv)) %>%
select(dest)
print(lastest_arrv)
library("dplyr")
lastest_arrv <- flights %>%
group_by(dest) %>%
summarize(average_arrv = mean(arr_time, na.rm = TRUE)) %>%
filter(average_arrv == max(average_arrv)) %>%
select(dest)
print(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
summarize(average_arrv = mean(arr_time, na.rm = TRUE)) %>%
filter(average_arrv == max(average_arrv)) %>%
select(dest, average_arrv)
print(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
summarize(average_arrv = mean(arr_delay, na.rm = TRUE)) %>%
filter(average_arrv == max(average_arrv)) %>%
select(dest, average_arrv)
print(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
summarize(average_arrv = mean(arr_delay, na.rm = TRUE))
View(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
summarize(average_arrv = mean(arr_delay, na.rm = TRUE)) %>%
filter(average_arrv == max(average_arrv, na.rm = TRUE)) %>%
select(dest, average_arrv)
View(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
summarize(average_arrv = mean(arr_delay, na.rm = TRUE)) %>%
filter(average_arrv == max(average_arrv, na.rm = TRUE)) %>%
select(dest)
View(lastest_arrv)
print(summary(ks_projects))
library("dplyr")
# Load your data, making sure to not interpret strings as factors
ks_projects <- read.csv("data/ks-projects-201801.csv", stringsAsFactors = FALSE)
# To start, write the code to get some basic information about the dataframe:
# - What are the column names?
# - How many rows is the data frame?
# - How many columns are in the data frame?
# Use the `summary` function to get some summary information
print(summary(ks_projects))
ks_projects <- read.csv("data/ks-projects-201801.csv", stringsAsFactors = FALSE)
ks_projects <- read.csv("data/ks-projects-201801.csv", stringsAsFactors = FALSE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library("httr")
library("jsonlite")
library("dplyr")
library("ggrepel")
library("ggmap")
# Load API key (stored in another file)
source("api_key.R")
# Construct your search query
base_uri <- "https://api.yelp.com/v3/"
endpoint <- "businesses/search"
uri <- paste0(base_uri, endpoint)
# Store a list of query parameters
query_params <- list(
term = "restaurant",
categories = "cuban",
location = "Seattle, WA",
sort_by = "rating",
radius = 8000
)
# Make a GET request, including your API key as a header
response <- GET(
uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Save the data frame of interest
restaurants <- flatten(response_data$businesses)
# Modify the data frame for analysis and presentation
restaurants <- restaurants %>%
mutate(rank = row_number()) %>%
mutate(name_and_rank = paste0(rank, ". ", name))
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(get_map(location = "Seattle, WA", zoom = 11))
# Add labels to the map based on the coordinates in the data
base_map +
geom_label_repel(
data = restaurants,
aes(x = coordinates.longitude, y = coordinates.latitude, label = name_and_rank)
)
source('~/.active-rstudio-document')
install.packages("httr")
install.packages("jsonlite")
install.packages("dplyr")
install.packages("ggrepel")
install.packages("ggmap")
install.packages("ggrepel")
install.packages("ggmap")
source("api_key.R")
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(get_map(location = "Seattle, WA", zoom = 11))
# Add labels to the map based on the coordinates in the data
base_map +
geom_label_repel(
data = response_data,
aes(x = coordinates.longitude, y = coordinates.latitude, label = name_and_rank)
)
# Construct your search query
base_uri <- "https://api.yelp.com/v3/"
endpoint <- "businesses/search"
uri <- paste0(base_uri, endpoint)
# Store a list of query parameters
query_params <- list(
term = "restaurant",
categories = "cuban",
location = "Seattle, WA",
sort_by = "rating",
radius = 8000
)
# Make a GET request, including your API key as a header
response <- GET(
uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Save the data frame of interest
restaurants <- flatten(response_data$businesses)
# Modify the data frame for analysis and presentation
restaurants <- restaurants %>%
mutate(rank = row_number()) %>%
mutate(name_and_rank = paste0(rank, ". ", name))
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(get_map(location = "Seattle, WA", zoom = 11))
# Add labels to the map based on the coordinates in the data
base_map +
geom_label_repel(
data = restaurants,
aes(x = coordinates.longitude, y = coordinates.latitude, label = name_and_rank)
)
# Load API key (stored in another file)
source("api_key.R")
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(get_map(location = "Seattle, WA", zoom = 11))
# Add labels to the map based on the coordinates in the data
base_map +
geom_label_repel(
data = response_data,
aes(x = coordinates.longitude, y = coordinates.latitude, label = name_and_rank)
)
# Construct your search query
base_uri <- "https://api.yelp.com/v3/"
endpoint <- "businesses/search"
uri <- paste0(base_uri, endpoint)
# Store a list of query parameters
query_params <- list(
term = "restaurant",
categories = "cuban",
location = "Seattle, WA",
sort_by = "rating",
radius = 8000
)
# Make a GET request, including your API key as a header
response <- GET(
uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Save the data frame of interest
restaurants <- flatten(response_data$businesses)
# Modify the data frame for analysis and presentation
restaurants <- restaurants %>%
mutate(rank = row_number()) %>%
mutate(name_and_rank = paste0(rank, ". ", name))
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(get_map(location = "Seattle, WA", zoom = 11))
# Add labels to the map based on the coordinates in the data
base_map +
geom_label_repel(
data = restaurants,
aes(x = coordinates.longitude, y = coordinates.latitude, label = name_and_rank)
)
base_map <- ggmap(get_map(location = "Seattle, WA", zoom = 11))
source('~/.active-rstudio-document')
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
shiny::runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
shiny::runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
shiny::runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
shiny::runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
shiny::runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
shiny::runApp('C:/Users/kevin/OneDrive/Desktop/study/Info201/finalprojectAH4')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop/study/Info201/finalprojectAH4')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop/study/Info201/finalprojectAH4')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop/study/Info201/finalprojectAH4')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop/study/Info201/finalprojectAH4')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop/study/Info201/finalprojectAH4')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop/study/Info201/finalprojectAH4')
=======
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram()
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram(bins = 30)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram(bins = 30)
mean(phats_20)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(oilabs)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(oilabs)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
proportions <- ames %>% select(Central.Air) %>% table() %>% prop.table()
p <- as.numeric(proportions[2])
ames <- ames %>% mutate(air = 1*(Central.Air == 'Y'))
air <- ames$air
pop_p <- sum(air)/as.numeric(count(ames))
pop_sd <- sd(air)
pop_sd_test <- sqrt(pop_p*(1-pop_p))
samp <- sample(air, size = 50)
p_hat <- sum(samp)/length(samp)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram(bins = 30)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram(bins = 30)
median(phats_20)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram(bins = 30)
median(phats_20)
min(phats_20)
max(phats_20)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram(bins = 30)
median(phats_20)
min(phats_20)
max(phats_20)
summarize(phats_20)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram(bins = 30)
median(phats_20)
min(phats_20)
max(phats_20)
summary(phats_20)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram(bins = 30)
summary(phats_20)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(oilabs)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(oilabs)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(oilabs)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
proportions <- ames %>% select(Central.Air) %>% table() %>% prop.table()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(oilabs)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(oilabs)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
proportions <- ames %>% select(Central.Air) %>% table() %>% prop.table()
p <- as.numeric(proportions[2])
proportions <- ames %>% select(Central.Air) %>% table() %>% prop.table()
p <- as.numeric(proportions[2])
ames <- ames %>% mutate(air = 1*(Central.Air == 'Y'))
air <- ames$air
pop_p <- sum(air)/as.numeric(count(ames))
pop_sd <- sd(air)
pop_sd_test <- sqrt(pop_p*(1-pop_p))
samp <- sample(air, size = 50)
p_hat <- sum(samp)/length(samp)
samp1 <- sample(air, size=20)
samp2 <- sample(air, size=50)
samp3 <- sample(air, size=200)
phat1 <- sum(samp1)/length(samp1)
phat2 <- sum(samp2)/length(samp2)
phat3 <- sum(samp3)/length(samp3)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
ggplot(data = NULL, aes(x = phats_20)) + geom_histogram(bins = 30)
summary(phats_20)
mean_phats_20 <- mean(phats_20)
mean_phats_20 <- mean(phats_20)
diff <- mean_phats_20 - p
sd_phats_20 <- sd(phats_20)
set.seed(111)
phats_20 <- replicate(100000, mean(sample(air, size=20)))
phats_50 <- replicate(100000, mean(sample(air, size=50)))
phats_200 <- replicate(100000, mean(sample(air, size=200)))
ggplot(data = NULL, aes(x = phats_50)) + geom_histogram(bins = 30)
ggplot(data = NULL, aes(x = phats_50)) + geom_histogram(bins = 30)
ggplot(data = NULL, aes(x = phats_200)) + geom_histogram(bins = 30)
ggplot(data = NULL, aes(x = phats_50)) + geom_histogram(bins = 40)
ggplot(data = NULL, aes(x = phats_200)) + geom_histogram(bins = 40)
ggplot(data = NULL, aes(x = phats_50)) + geom_histogram(bins =50)
ggplot(data = NULL, aes(x = phats_200)) + geom_histogram(bins = 50)
ggplot(data = NULL, aes(x = phats_50)) + geom_histogram()
ggplot(data = NULL, aes(x = phats_200)) + geom_histogram()
ggplot(data = NULL, aes(x = phats_50)) + geom_histogram(bins = 30)
ggplot(data = NULL, aes(x = phats_200)) + geom_histogram(bins = 30)
ggplot(data = NULL, aes(x = phats_200)) +
geom_blank() +
geom_histogram(bins=30,aes(y = ..density..)) +
stat_function(fun = dnorm, args = c(mean = pop_p, sd = sqrt((pop_p)*(1-pop_p)/200)), col = "tomato")
lower <- pop_p - 1.96*pop_sd/sqrt(200)
upper <- pop_p + 1.96*pop_sd/sqrt(200)
sum(phats_200 > lower & phats_200 < upper)
## And calculations
lower <- pop_p - 1.96*pop_sd/sqrt(200)
upper <- pop_p + 1.96*pop_sd/sqrt(200)
round(sum(phats_200 > lower & phats_200 < upper),2)
lower <- pop_p - 1.96*pop_sd/sqrt(200)
upper <- pop_p + 1.96*pop_sd/sqrt(200)
sum(phats_200 > lower & phats_200 < upper)
lower <- pop_p - 1.96*pop_sd/sqrt(200)
upper <- pop_p + 1.96*pop_sd/sqrt(200)
proportion <- sum(phats_200 > lower & phats_200 < upper)/length(phats_200)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
library(tidyverse)
choose(100,97)
# Choose function to calculate the number of ways to choose 97successes in 100 trails
value <- choose(100,97)
#Success = 0.90 & Fail = 1 - 0.90 = 0.10
success <- 0.90
fail <- 0.10
#Calculating the probability that exactly 97 out of 100 randomly sampled American adults had chickenpox during childhood.
probability1 <- value * success^97 * fail^3
#Choose function to calculate the number of ways to choose 3 failures in 100 trails
value2 <- choose(100,3)
#Calculating the probability that exactly 3 out of a new sample of 100 American adults have not had chickenpox in their childhood.
probability2 <- value2 * fail^3 * success^97
#Choose function to calculate the number of ways to choose 0 success in 10 trails
value3 <- choose(10,0)
#Calculating the probability that exactly none of a sample of 10 have had chickenpox
probability3 <- value3 * success^0 * fail^10
#The probability that at least 1 out of 10 have had chickenpox is the same as 1 - probability of none having chickenpox
answer <- 1 - probability3
#Choose function to calculate the number of ways to choose 0, 1, 2 and 3 failures in 10 trails
f0 <- choose(10,0)
f1 <- choose(10,1)
f2 <- choose(10,2)
f3 <- choose(10,3)
#Calculating the probability that exactly all of the sample of 10 have had chickenpox
p0 <- f0 * fail^0 * success^10
#Calculating the probability that exactly 9 of the sample of 10 have had chickenpox
p1 <- f1 * fail^1 * success^9
#Calculating the probability that exactly 8 of the sample of 10 have had chickenpox
p2 <- f2 * fail^2 * success^8
#Calculating the probability that exactly 7 of the sample of 10 have had chickenpox
p3 <- f3 * fail^3 * success^7
#The probability that at least 1 out of 10 have had chickenpox is the same as 1 - probability of none having chickenpox
answer2 <- p0 + p1 + p2 + p3
#Choose function to calculate the number of ways to choose 0 success in 10 trails
value3 <- choose(10,0)
#Calculating the probability that exactly none of a sample of 10 have had chickenpox
probability3 <- value3 * success^0 * fail^10
#The probability that at least 1 out of 10 have had chickenpox is the same as 1 - probability of none having chickenpox
answer <- 1 - probability3
#Choose function to calculate the number of ways to choose 0, 1, 2 and 3 failures in 10 trails
f0 <- choose(10,0)
f1 <- choose(10,1)
f2 <- choose(10,2)
f3 <- choose(10,3)
#Calculating the probability that exactly all of the sample of 10 have had chickenpox
p0 <- f0 * fail^0 * success^10
#Calculating the probability that exactly 9 of the sample of 10 have had chickenpox
p1 <- f1 * fail^1 * success^9
#Calculating the probability that exactly 8 of the sample of 10 have had chickenpox
p2 <- f2 * fail^2 * success^8
#Calculating the probability that exactly 7 of the sample of 10 have had chickenpox
p3 <- f3 * fail^3 * success^7
#The probability that at least 1 out of 10 have had chickenpox is the same as 1 - probability of none having chickenpox
answer2 <- p0 + p1 + p2 + p3
# Standard Devation
p = 0.9
SD = sqrt(0.9*0.1*120)
# Mean
mean = 0.09 * 15000
sd = sqrt(0.09*15000*(1-0.09))
# Mean
mean <- 0.09 * 15000
sd <- sqrt(0.09*15000*(1-0.09))
probability <- binomial(15000,0.09)
N(mean,sd)
x <- N(mean,sd)
# Z-score
Z <- (1500 - mean)/sd
probability4 <- 1 - dnorm(Z)
# Z-score
Z <- (1500 - mean)/sd
probability4 <- 1 - pnorm(Z)
# Z-score
Z <- (1500 - mean)/sd
probability4 <- 1 - pnorm(Z)
# Mean
mean <- 0.09 * 15000
sd <- sqrt(0.09*15000*(1-0.09))
# Z-score
Z <- (1500 - mean)/sd
probability4 <- 1 - pnorm(Z)
pnorm
# Z-score
Z <- (1500 - mean)/sd
pnorm(Z)
probability4 <- 1 - pnorm(Z)
pnorm
# Z-score
Z <- (1500 - mean)/sd
pnorm(Z)
probability4 <- 1 - pnorm(Z)
pnorm
# Z-score
Z <- (1500 - mean)/sd
round(1-pnorm(Z),6)
probability4 <- 1 - pnorm(Z)
pnorm
# Z-score
Z <- (1500 - mean)/sd
round(1-pnorm(Z),7)
probability4 <- 1 - pnorm(Z)
pnorm
# Z-score
Z <- (1500 - mean)/sd
round(1-pnorm(Z),7)
probability4 <- 1 - pnorm(Z)
9.4*10^-6
pnorm
# Z-score
Z <- (1500 - mean)/sd
#Calculating probability that a survey with 15000 households has 1500 or more responses is
probability4 <- 1 - pnorm(Z)
pnorm
# Z-score
Z <- (1500 - mean)/sd
#Calculating probability that a survey with 15000 households has 1500 or more responses is
probability4 <- 1 - pnorm(Z, lower.tail = FALSE)
pnorm
# Z-score
Z <- (1500 - mean)/sd
#Calculating probability that a survey with 15000 households has 1500 or more responses is
probability4 <- 1 - pnorm(Z)
library(tidyverse)
ames <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week6/ames.csv")
area <- ames$Gr.Liv.Area
area <- ames$Gr.Liv.Area
pop_mean <- mean(area)
pop_sd <- sd(area)
SE <- pop_sd/sqrt(30)
xbar_30 <- replicate(100000, mean(sample(area, size=30)))
mean_xbar <- mean(xbar_30)
sd_xbar <- sd(xbar_30)
ggplot(data = NULL, aes(x = phats_200)) +
geom_blank() +
geom_histogram(bins=30,aes(y = ..density..)) +
stat_function(fun = dnorm, args = c(mean = pop_p, sd = pop_sd/sqrt(200)), col = "tomato")
ggplot(data = NULL, aes(x = xbar_30)) +
geom_blank() +
geom_histogram(bins=30,aes(y = ..density..)) +
stat_function(fun = dnorm, args = c(mean = pop_mean, sd = pop_sd/sqrt(30)), col = "tomato")
lower <- pop_mean - 1.96*pop_sd/sqrt(30)
upper <- pop_mean + 1.96*pop_sd/sqrt(30)
proportion <- sum(xbar_30 > lower & xbar_30 < upper)/length(xbar_30)
income_data <- read.csv("./incomeforfinalproject.csv", stringsAsFactors = FALSE)
setwd("~/Github/finalprojectAH4/by-state-suicide")
library(dplyr)
data_frame <- read.csv("unemployment-rate.csv", stringsAsFactors = FALSE)
setwd("~/Github/finalprojectAH4")
setwd("~/Github/finalprojectAH4")
library(dplyr)
data_frame <- read.csv("unemployment-rate.csv", stringsAsFactors = FALSE)
new_data_frame <- data_frame %>%
group_by(State, Year) %>%
summarize(rate_sum = mean(Rate, na.rm = TRUE))
write.csv(new_data_frame, "umemployment_rate_grouped.csv", row.names = FALSE)
View(data_frame)
View(new_data_frame)
setwd("~/Github/finalprojectAH4")
library(dplyr)
data_frame <- read.csv("unemploymentrateforfinalproject.csv", stringsAsFactors = FALSE)
new_data_frame <- data_frame %>%
group_by(State, Year) %>%
summarize(rate_sum = mean(Rate, na.rm = TRUE))
write.csv(new_data_frame, "umemployment_rate_grouped.csv", row.names = FALSE)
>>>>>>> e866b9db829a4f026c3c417cfe6bb61df9cb4a14
