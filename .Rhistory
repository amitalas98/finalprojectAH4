# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
lintr:::addin_lint()
lintr:::addin_lint()
install.packages("carData")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library("carData")
print(sum(Florida[Florida["GORE"] > Florida["BUSH]","NADER"]))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(Flights)
source('~/.active-rstudio-document')
view(flights)
View(flights)
View("flights")
source('~/.active-rstudio-document')
View(flights)
View(Flights)
View(Flight)
View(flight)
View(flights)
source('~/.active-rstudio-document')
library(nycflights13)
source('~/.active-rstudio-document')
install.packages("nycflights13")
source('~/.active-rstudio-document')
library("nycflights13")
View(flights)
library("dplyr")
install.packages("dplyr")
library("dplyr")
airport <- flights %>%
group_by(dest) %>%
summarise(mean_arrv <- mean(arr_time)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
airport <- flights %>%
group_by(dest) %>%
summarise(mean_arrv = mean(arr_time)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
airport <- flights %>%
group_by(dest) %>%
summarise(mean_arrv = mean(arr_time)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
View(airport)
library(pscl)
install.packages("pscl")
library(pscl)
View(presidentialElections)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(nycflights13)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("nycflights13")
View(flights)
install.packages("dplyr")
library("dplyr")
airport <- flights %>%
group_by(dest) %>%
summarise(mean_arrv = mean(arr_time)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
View(flights)
library(flights)
View(flights)
install.packages("dplyr")
library("dplyr")
airport <- flights %>%
group_by(dest) %>%
summarise(mean_arrv = mean(arr_time)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
install.packages("dplyr")
source('~/.active-rstudio-document')
library("flights")
library("flights")
View(flights)
library(nycflights13)
library("flights13")
View(flights)
install.packages("dplyr")
library("dplyr")
airport <- flights %>%
group_by(dest) %>%
summarise(mean_arrv = mean(arr_time)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
airport <- flights %>%
group_by(dest) %>%
summarize(mean_arrv = mean(arr_time)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
source('~/.active-rstudio-document')
airport <- flights %>%
group_by(dest) %>%
summarize(mean_arrv = mean(arr_time, na.rm = TRUE)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
airport <- flights %>%
group_by(dest) %>%
summarize(grouped, mean_arrv = mean(arr_time, na.rm = TRUE)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
source('~/.active-rstudio-document')
airport <- flights %>%
group_by(dest) %>%
summarize(grouped, mean_arrv = mean(arr_time)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
airport <- flights %>%
group_by(dest) %>%
summarize( mean_arrv = mean(arr_time)) %>%
filter(mean_arrv == max(mean_arrv)) %>%
select(dest)
print(airport)
library("dplyr")
airport <- flights %>%
group_by(dest)
#summarize( mean_arrv = mean(arr_time)) %>%
#filter(mean_arrv == max(mean_arrv)) %>%
#select(dest)
#print(airport)
View(airport)
airport <- group_by(flights, dest)
#summarize( mean_arrv = mean(arr_time)) %>%
#filter(mean_arrv == max(mean_arrv)) %>%
#select(dest)
#print(airport)
View(airport)
airport <- group_by(flights, dest)
sum <- summarise(airport, mean_arrv = mean(arr_time))
#summarize( mean_arrv = mean(arr_time)) %>%
#filter(mean_arrv == max(mean_arrv)) %>%
#select(dest)
#print(airport)
View(sum)
airport <- group_by(flights, dest)
sum <- summarise(airport, mean_arrv = mean(arr_time, na.rm = TRUE))
#summarize( mean_arrv = mean(arr_time)) %>%
#filter(mean_arrv == max(mean_arrv)) %>%
#select(dest)
#print(airport)
View(sum)
answer <- filter(sum, mean_arrv == max(mean_arrv)) %>%
select(dest)
#print(airport)
print(answer)
answer <- filter(sum, mean_arrv == max(mean_arrv)) %>%
select(dest)
#print(airport)
View(answer)
answer <- filter(sum, mean_arrv == max(mean_arrv))
#print(airport)
print(answer)
answer <- filter(sum, mean_arrv == max(mean_arrv))
a <- select(answer, dest)
#print(airport)
print(a)
#print(airport)
View(filter(sum, mean_arrv == max(mean_arrv)))
View(filter(sum, mean_arrv == max(mean_arrv)))
#print(airport)
View(select(filter(sum, mean_arrv == max(mean_arrv)), dest))
source('~/.active-rstudio-document')
library("nycflights13")
View(flights)
install.packages("dplyr")
library("dplyr")
airport <- group_by(flights, dest)
lastest_arrv <- flights %>%
group_by(dest) %>%
summarize(average_arrv = mean(arr_time)) %>%
filter(average_arrv == max(average_arrv)) %>%
select(dest)
print(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
filter(arr_time == NA)
summarize(average_arrv = mean(arr_time)) %>%
filter(average_arrv == max(average_arrv)) %>%
select(dest)
print(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
filter(arr_time == NA)
summarize(average_arrv = mean(arr_time)) %>%
filter(average_arrv == max(average_arrv)) %>%
select(dest)
print(lastest_arrv)
library("dplyr")
lastest_arrv <- flights %>%
group_by(dest) %>%
filter(arr_time != NA)
summarize(average_arrv = mean(arr_time)) %>%
filter(average_arrv == max(average_arrv)) %>%
select(dest)
print(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
filter(arr_time != NA) %>%
summarize(average_arrv = mean(arr_time)) %>%
filter(average_arrv == max(average_arrv)) %>%
select(dest)
print(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
filter(arr_time != NA) %>%
summarize(average_arrv = mean(arr_time)) %>%
#filter(average_arrv == max(average_arrv)) %>%
#select(dest)
print(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
filter(arr_time != NA) %>%
summarize(average_arrv = mean(arr_time))
#filter(average_arrv == max(average_arrv)) %>%
#select(dest)
print(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
filter(arr_time != NA) %>%
summarize(average_arrv = mean(arr_time))
filter(average_arrv == max(average_arrv)) %>%
select(dest)
print(lastest_arrv)
library("dplyr")
lastest_arrv <- flights %>%
group_by(dest) %>%
summarize(average_arrv = mean(arr_time, na.rm = TRUE)) %>%
filter(average_arrv == max(average_arrv)) %>%
select(dest)
print(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
summarize(average_arrv = mean(arr_time, na.rm = TRUE)) %>%
filter(average_arrv == max(average_arrv)) %>%
select(dest, average_arrv)
print(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
summarize(average_arrv = mean(arr_delay, na.rm = TRUE)) %>%
filter(average_arrv == max(average_arrv)) %>%
select(dest, average_arrv)
print(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
summarize(average_arrv = mean(arr_delay, na.rm = TRUE))
View(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
summarize(average_arrv = mean(arr_delay, na.rm = TRUE)) %>%
filter(average_arrv == max(average_arrv, na.rm = TRUE)) %>%
select(dest, average_arrv)
View(lastest_arrv)
lastest_arrv <- flights %>%
group_by(dest) %>%
summarize(average_arrv = mean(arr_delay, na.rm = TRUE)) %>%
filter(average_arrv == max(average_arrv, na.rm = TRUE)) %>%
select(dest)
View(lastest_arrv)
print(summary(ks_projects))
library("dplyr")
# Load your data, making sure to not interpret strings as factors
ks_projects <- read.csv("data/ks-projects-201801.csv", stringsAsFactors = FALSE)
# To start, write the code to get some basic information about the dataframe:
# - What are the column names?
# - How many rows is the data frame?
# - How many columns are in the data frame?
# Use the `summary` function to get some summary information
print(summary(ks_projects))
ks_projects <- read.csv("data/ks-projects-201801.csv", stringsAsFactors = FALSE)
ks_projects <- read.csv("data/ks-projects-201801.csv", stringsAsFactors = FALSE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library("httr")
library("jsonlite")
library("dplyr")
library("ggrepel")
library("ggmap")
# Load API key (stored in another file)
source("api_key.R")
# Construct your search query
base_uri <- "https://api.yelp.com/v3/"
endpoint <- "businesses/search"
uri <- paste0(base_uri, endpoint)
# Store a list of query parameters
query_params <- list(
term = "restaurant",
categories = "cuban",
location = "Seattle, WA",
sort_by = "rating",
radius = 8000
)
# Make a GET request, including your API key as a header
response <- GET(
uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Save the data frame of interest
restaurants <- flatten(response_data$businesses)
# Modify the data frame for analysis and presentation
restaurants <- restaurants %>%
mutate(rank = row_number()) %>%
mutate(name_and_rank = paste0(rank, ". ", name))
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(get_map(location = "Seattle, WA", zoom = 11))
# Add labels to the map based on the coordinates in the data
base_map +
geom_label_repel(
data = restaurants,
aes(x = coordinates.longitude, y = coordinates.latitude, label = name_and_rank)
)
source('~/.active-rstudio-document')
install.packages("httr")
install.packages("jsonlite")
install.packages("dplyr")
install.packages("ggrepel")
install.packages("ggmap")
install.packages("ggrepel")
install.packages("ggmap")
source("api_key.R")
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(get_map(location = "Seattle, WA", zoom = 11))
# Add labels to the map based on the coordinates in the data
base_map +
geom_label_repel(
data = response_data,
aes(x = coordinates.longitude, y = coordinates.latitude, label = name_and_rank)
)
# Construct your search query
base_uri <- "https://api.yelp.com/v3/"
endpoint <- "businesses/search"
uri <- paste0(base_uri, endpoint)
# Store a list of query parameters
query_params <- list(
term = "restaurant",
categories = "cuban",
location = "Seattle, WA",
sort_by = "rating",
radius = 8000
)
# Make a GET request, including your API key as a header
response <- GET(
uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Save the data frame of interest
restaurants <- flatten(response_data$businesses)
# Modify the data frame for analysis and presentation
restaurants <- restaurants %>%
mutate(rank = row_number()) %>%
mutate(name_and_rank = paste0(rank, ". ", name))
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(get_map(location = "Seattle, WA", zoom = 11))
# Add labels to the map based on the coordinates in the data
base_map +
geom_label_repel(
data = restaurants,
aes(x = coordinates.longitude, y = coordinates.latitude, label = name_and_rank)
)
# Load API key (stored in another file)
source("api_key.R")
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(get_map(location = "Seattle, WA", zoom = 11))
# Add labels to the map based on the coordinates in the data
base_map +
geom_label_repel(
data = response_data,
aes(x = coordinates.longitude, y = coordinates.latitude, label = name_and_rank)
)
# Construct your search query
base_uri <- "https://api.yelp.com/v3/"
endpoint <- "businesses/search"
uri <- paste0(base_uri, endpoint)
# Store a list of query parameters
query_params <- list(
term = "restaurant",
categories = "cuban",
location = "Seattle, WA",
sort_by = "rating",
radius = 8000
)
# Make a GET request, including your API key as a header
response <- GET(
uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Save the data frame of interest
restaurants <- flatten(response_data$businesses)
# Modify the data frame for analysis and presentation
restaurants <- restaurants %>%
mutate(rank = row_number()) %>%
mutate(name_and_rank = paste0(rank, ". ", name))
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(get_map(location = "Seattle, WA", zoom = 11))
# Add labels to the map based on the coordinates in the data
base_map +
geom_label_repel(
data = restaurants,
aes(x = coordinates.longitude, y = coordinates.latitude, label = name_and_rank)
)
base_map <- ggmap(get_map(location = "Seattle, WA", zoom = 11))
source('~/.active-rstudio-document')
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
shiny::runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
shiny::runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
shiny::runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
shiny::runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
shiny::runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop')
install.packages("shiny")
shiny::runApp('C:/Users/kevin/OneDrive/Desktop/study/Info201/finalprojectAH4')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop/study/Info201/finalprojectAH4')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop/study/Info201/finalprojectAH4')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop/study/Info201/finalprojectAH4')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop/study/Info201/finalprojectAH4')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop/study/Info201/finalprojectAH4')
install.packages("shiny")
runApp('C:/Users/kevin/OneDrive/Desktop/study/Info201/finalprojectAH4')
